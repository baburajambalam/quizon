Objective:
Build a UI for a .NET web application using C#.

Framework:
- **Blazor Server**
  - Provides rich interactivity with server-side logic.
  - Uses SignalR for real-time communication.
  - Keeps all code in one project (similar to classic ASP.NET WebForms).

Project Purpose:
- **Project Name**: Quizon
- **Description**: A quiz application with the following features:
  1. Users log into the application.
  2. Users upload documents.
  3. Uploaded documents are stored in the user's profile.
  4. An AI service processes the documents to generate quizzes.
  5. Users can navigate to a quiz page by selecting one of their uploaded documents.

Application Features:
1. **Login Page**:
   - Users log in using their email as the account identifier.
   - The application sends a One-Time Password (OTP) to the user's email.
   - Users must enter the correct OTP to create a session.
   - Sessions are valid until midnight.

2. **Landing Page**:
   - Upon successful login, users are redirected to the landing pa
   - Displays a list of uploaded documents and their statuses.
   - Provides navigation options to upload new documents or start quizzes.

3. **Document Upload Page**:
   - Users can upload documents in supported formats (e.g., PDF, DOCX).
   - Uploaded documents are validated and stored in the user's profile.
   - Displays upload progress and success/failure messages.

4. **Quiz Page**:
   - Users select a document to generate a quiz.
   - The page displays quiz questions generated by the AI service.
   - Users can answer questions and submit their responses.
   - Displays quiz results upon submission.

5. **AI Service Integration**:
   - The application integrates with an AI service to process uploaded documents.
   - The AI service extracts relevant information and generates quiz questions.
   - Quiz generation is triggered when a user selects a document for a quiz.
